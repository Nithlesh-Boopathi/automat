import os
import subprocess
import shutil
import requests

# Configuration
WORKDIR = "./bootstrap-onboarding"
JIRA_URL = "https://your-jira-instance.atlassian.net/rest/api/3/issue/"
JIRA_TOKEN = "your_bearer_token"
HEADERS = {
    "Authorization": f"Bearer {JIRA_TOKEN}",
    "Accept": "application/json"
}

print("Creating working directory...")
os.makedirs(WORKDIR, exist_ok=True)
os.chdir(WORKDIR)
print(f"Current working directory: {os.getcwd()}")

def get_jira_story(jira_number):
    print(f"Fetching JIRA story for: {jira_number}")
    response = requests.get(f"{JIRA_URL}{jira_number}", headers=HEADERS)
    if response.status_code == 200:
        story = response.json().get("fields", {}).get("summary", "Unknown Story")
        print(f"JIRA Story: {story}")
        return story
    print("Story Not Found")
    return "Story Not Found"

# Ensure foundations.txt exists
FOUNDATION_FILE = "foundations.txt"
if not os.path.exists(FOUNDATION_FILE):
    print(f"Error: {FOUNDATION_FILE} not found.")
    exit(1)

print("Reading foundations.txt...")
with open(FOUNDATION_FILE, "r") as file:
    foundations = file.readlines()

cloned_repos = set()
for foundation in foundations:
    try:
        pool, env = foundation.strip().split("-")
    except ValueError:
        print(f"Skipping invalid entry: {foundation.strip()}")
        continue
    
    repo_url = f"bitbucketdc-cluster04.jpmchase.net/scm/psiedevops/newgate-state-{env}.git"
    repo_dir = f"{WORKDIR}/newgate-state-{env}"
    print(f"Processing repository: {repo_url}")

    # Clone repository if needed (only once per environment)
    if env not in cloned_repos:
        if not os.path.isdir(repo_dir):
            print(f"Cloning repository: {repo_url}")
            subprocess.run(["git", "clone", f"https://{repo_url}", repo_dir], check=True)
        else:
            print(f"Repository already exists: {repo_dir}")
        cloned_repos.add(env)

    # Create directories and copy files only if they don’t already exist
    for dir_name in ["asg", "idp", "dbp"]:
        dest_path = f"{repo_dir}/{dir_name}/{pool}-{env}"
        if not os.path.exists(dest_path):
            print(f"Copying files to {dest_path}...")
            shutil.copytree(f"{repo_dir}/na5x-{env}", dest_path, dirs_exist_ok=True)
        else:
            print(f"Skipping copy: {dest_path} already exists")

    # Special case for ENG foundations: Only add line if it’s missing
    if env == "eng":
        concourse_file = f"{repo_dir}/idp/{pool}-eng/features/concourse-pipelines-vars.yml"
        if os.path.exists(concourse_file):
            print(f"Checking for CANARY_SKIP_DEPLOY_AND_VALIDATE in {concourse_file}...")
            with open(concourse_file, "r+") as file:
                content = file.read()
                if "CANARY_SKIP_DEPLOY_AND_VALIDATE: true" not in content:
                    print("Adding CANARY_SKIP_DEPLOY_AND_VALIDATE setting...")
                    file.write("\nCANARY_SKIP_DEPLOY_AND_VALIDATE: true\n")
                else:
                    print("Setting already present.")

# Get JIRA number and fetch story name
jira_number = input("Enter the JIRA number for the commit: ")
story_name = get_jira_story(jira_number)

# Commit and push changes
for repo_dir in cloned_repos:
    repo_path = f"{WORKDIR}/newgate-state-{repo_dir}"
    if os.path.isdir(repo_path):
        print(f"Committing and pushing changes for {repo_path}...")
        os.chdir(repo_path)
        subprocess.run(["git", "add", "."], check=True)
        subprocess.run(["git", "commit", "-m", f"{jira_number}: {story_name} - Onboard new foundations"], check=True)
        subprocess.run(["git", "push"], check=True)
        os.chdir(WORKDIR)
    else:
        print(f"Skipping commit: {repo_path} does not exist.")
